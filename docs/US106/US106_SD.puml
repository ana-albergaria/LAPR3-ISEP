@startuml
autonumber
'hide footbox
actor "Unknown" as ADM

participant "TopNUI" as UI
participant "TopNController" as CTRL
participant "ShipBST" as STORE
participant "Company" as COMP
participant "PositionBST" as BST
participant "Position" as POS
participant "Ship" as SHIP


activate ADM
ADM -> UI : asks to see the top-N ships with the most km travelled and their meanSOG
activate UI
loop while top-N ships and meanSOGwant to be seen
UI -> ADM : requests initial and final Base Date Time and N ships to be sorted
deactivate UI

ADM -> UI : inserts requested data (initial, final, N)
activate UI
UI -> CTRL : List<E> getShipsByDate(initial, final)
activate CTRL
CTRL -> COMP : shipBST = getShipsBST()
activate COMP
deactivate COMP
CTRL -> STORE : List<E> getShipsByDate(initial, final)
activate STORE
STORE -> SHIP : positionBST = getPositionsBST()

activate SHIP
deactivate SHIP
STORE -> BST : startDate = getStartDate()
activate BST
STORE -> BST : endDate = getEndDate()
deactivate STORE
BST -> POS : getBaseDateTime()
activate POS
deactivate BST
deactivate POS

CTRL -> UI : shipList
deactivate CTRL

UI -> CTRL : List<E> sortNShips(shipList, N)
activate CTRL
CTRL -> STORE : sortedShips = List<E> sortNShips(shipList, N)
activate STORE
STORE -> BST : travelledDistance = getTotalDistance(code)
activate BST
deactivate BST
deactivate STORE
UI -> CTRL : Map<String, List<E>> getShipWithMean(sortedShips)
CTRL -> STORE : shipByVessel = Map<String, List<E>> getShipWithMean(sortedShips)
activate STORE
STORE -> SHIP : code = getCode()
activate SHIP
deactivate SHIP
STORE -> SHIP : getVesselType()
activate SHIP
deactivate SHIP
STORE -> BST : getMeanSOG()
activate BST
deactivate BST
deactivate STORE
CTRL -> UI : return shipByVessel
deactivate CTRL
UI -> ADM : returns sorted ships with the most km travelled and their meanSOG
deactivate UI
end
deactivate ADM

@enduml
@startuml


autonumber
actor "Traffic Manager" as TM

participant "ShowPairsOfShipsUI" as UI
participant "ShowPairsOfShipsController" as CTRL
participant "Company" as COMP
participant "shipsBST:\nShipsBST" as BstShip
participant "ship:\nShip" as S
participant "ship2\nShip" as S2
/'participant "ShipPosition" as SP'/
participant "positionsBST:\nPositionsBST" as BstPosition
participant "positionsBST2:\nPositionsBST" as BstPosition2
participant "listShipsWithIntendedTD:\nIterator<Ship>" as ITERATOR
participant "infoPair:\nTreeMap<Double, String>" as TREEMAP
participant "listPairsOfShips:\nList<TreeMap<Double, String>>" as LIST


activate TM
TM -> "UI" : asks the pairs of ships with close departure/arrival coordinates
activate "UI"
UI -> CTRL : getPairsOfShip()
activate CTRL
CTRL -> COMP : shipsBST = getBstShip()
activate COMP
deactivate COMP
CTRL -> BstShip : getPairsOfShips()
/'decide what kind of list'/
activate BstShip
/'BstShip -> BstShip : listOfShips = inOrder() '/
note over BstShip, S
The **listShipsWithIntendedTD** contains only the ships
with Travelled Distance >= 10.
end note
BstShip -> BstShip : getShipsInOrderWithIntendedTD()
activate BstShip
BstShip --> BstShip : listShipsWithIntendedTD
deactivate BstShip
|||
loop for each Ship in listShipsWithIntendedTD
BstShip --> TREEMAP** : create()
BstShip -> ITERATOR : ship = next()
activate ITERATOR
deactivate ITERATOR
/'BstShip -> S : travelledDistance = getTravelledDistance()
activate S
deactivate S
'/
BstShip -> S : positionsBST = getPositionsBST()
activate S
deactivate S
BstShip -> BstPosition : travelledDistance = getTotalDistance()
activate BstPosition
deactivate BstPosition
/'alteração alt em baixo: travelledDistance2 >= 10 em vez de > 10'/
/'alt travelledDistance >= 10'/
loop hasNext()
BstShip -> ITERATOR : ship2 = next()
activate ITERATOR
deactivate ITERATOR
BstShip -> S2 : positionsBST2 = getPositionsBST()
activate S2
deactivate S2
BstShip -> BstPosition2 : travelledDistance2 = getTotalDistance()
activate BstPosition2
deactivate BstPosition2
/'BstShip -> S2 : travelledDistance2 = getTravelledDistance()
activate S2
deactivate S2'/
/'alteração alt em baixo: && travelledDistance2 >= 10'/
/'alt travelledDistance != travelledDistance2 && travelledDistance2 >= 10'/
alt travelledDistance != travelledDistance2
/'BstShip -> BstPosition : arrivalLat = getArrivalLatitude()
activate BstPosition
deactivate BstPosition
BstShip -> BstPosition : arrivalLog = getArrivalLongitude()
activate BstPosition
deactivate BstPosition
BstShip -> BstPosition2 : arrivalLat2 = getArrivalLatitude()
activate BstPosition2
deactivate BstPosition2
BstShip -> BstPosition2 : arrivalLog2 = getArrivalLongitude()
activate BstPosition2
deactivate BstPosition2
BstShip -> BstPosition : arrivalDistance = distanceBetweenInKm(arrivalLat, arrivalLat2, arrivalLog, arrivalLog2)'/
BstShip -> BstPosition : arrivalDistance = getArrivalDistance(positionsBST2)
activate BstPosition
deactivate BstPosition
alt arrivalDistance <= 5
/'BstShip -> BstPosition : depLat = getDeparLatitude()
activate BstPosition
deactivate BstPosition
BstShip -> BstPosition : depLog = getDepartLongitude()
activate BstPosition
deactivate BstPosition
BstShip -> BstPosition2 : depLat2 = getDepartLatitude()
activate BstPosition2
deactivate BstPosition2
BstShip -> BstPosition2 : depLog2 = getDepartLongitude()
activate BstPosition2
deactivate BstPosition2
BstShip -> BstPosition : depDistance = distanceBetweenInKm(depLat, depLat2, depLog, depLog2)
activate BstPosition
deactivate BstPosition'/
BstShip -> BstPosition : depDistance = getDepartureDistance(positionsBST2)
activate BstPosition
deactivate BstPosition
alt depDistance < 5

BstShip -> BstPosition : numMovs = size()
activate BstPosition
deactivate BstPosition
BstShip -> BstPosition2 : numMovs2 = size()
activate BstPosition2
deactivate BstPosition2

note over BstShip, S
The **diffTravDist** is the module of the difference
between the Travelled Distances.
The **allInfo** is a string containing the necessary info to show.
end note

BstShip -> TREEMAP : put(diffTravDist, allInfo)
activate TREEMAP
deactivate TREEMAP
end
end
end
end
BstShip -> LIST : add(infoPair)
activate LIST
deactivate LIST
/'end'/
end

BstShip --> CTRL : listPairsOfShips
deactivate BstShip
CTRL --> UI : listPairsOfShips
deactivate CTRL
"UI" --> TM : shows successfully information

deactivate "UI"





deactivate TM

@enduml
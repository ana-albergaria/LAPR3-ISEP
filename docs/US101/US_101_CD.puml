@startuml

skinparam classAttributeIconSize 0

class ImportShipsUI {}

class ImportShipsController {
- company
- ship
- shipPosition
- positionsBST
- registerPosition(positionDTO)
- createPosition(positionDTO, mmsi)
- saveShip()
- importShipFromFile(shipsFileDTO)
}

class Company {
- designation
- shipsBST
- getBstShip()
}

class Ship {
- positionsBST
- MMSI
- vesselName
- IMO
- callSign
- vesselTypeID
- length
- width
- draft
- cargo
- Ship(positionsBST, MMSI, vesselName, IMO, callSign, vesselTypeID, length, width, draft, cargo)
- checkPositionsBST(positionsBST)
- checkMMSI(int MMSI)
- checkVesselName(vesselName)
- checkIMO(IMO)
- checkLength(length)
- checkWidth(width)
- checkDraft(draft)
- checkCargo(cargo)
- getMMSI()
- setPositionsBST(positionsBST)
- equals(Object otherObject)
}

class ShipPosition {
- MMSI
- baseDateTime
- lat
- lon
- sog
- cog
- heading
- transcieverClass
- ShipPosition(mmsi, baseDateTime, lat, lon, sog, cog, heading, transcieverClass)
- checkMMSI(mmsi)
- checkBaseDateTime(baseDateTime)
- checkLat(lat)
- checkLon(lon)
- checkSog(sog)
- checkCog(cog)
- checkHeading(heading)
- checkTranscieverClass(transcieverClass)
}

class ShipStore {
- createShip(shipsFileDTO)
- validateShip(ship)
- saveShip(ship)
- getShipsBstMmsi()
}

class ShipBST {
- getShipByMmsiCode(mmsiCode)
}

class PositionsBST {
- hasPosition(shipPosition)
- validatePosition(shipPosition)
- savePosition(shipPosition)
}

Company "1" -- "1" ShipStore : uses >
ShipStore "1" -- "1" ShipBST : uses >
ShipBST "1" -- "1..*" Ship : owns >
Ship "1" -- "1" PositionsBST : uses >
PositionsBST "1" -- "1..*" ShipPosition : has >
ImportShipsUI ..> ImportShipsController
ImportShipsController ..> Company
ImportShipsController ..> ShipBST
ImportShipsController ..> Ship
ImportShipsController ..> PositionsBST
ImportShipsController ..> ShipPosition
ImportShipsController ..> ShipStore


@enduml